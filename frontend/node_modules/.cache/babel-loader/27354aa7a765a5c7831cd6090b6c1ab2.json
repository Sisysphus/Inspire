{"ast":null,"code":"const SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\n\nconst setUser = user => ({\n  type: SET_USER,\n  payload: user\n});\n\nconst removeUser = () => ({\n  type: REMOVE_USER\n});\n\nexport const login = ({\n  credential,\n  password\n}) => async dispatch => {\n  const res = await fetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      credential,\n      password\n    })\n  });\n  dispatch(setUser(res.data.user));\n  return res;\n};\nexport const restoreUser = () => async dispatch => {\n  const res = await fetch('/api/session');\n  dispatch(setUser(res.data.user));\n  return res;\n};\nexport const signup = user => async dispatch => {\n  const {\n    username,\n    email,\n    password\n  } = user;\n  const response = await fetch('/api/users', {\n    method: 'POST',\n    body: JSON.stringify({\n      username,\n      email,\n      password\n    })\n  });\n  dispatch(setUser(response.data.user));\n  return response;\n};\nexport const logout = () => async dispatch => {\n  const response = await fetch('/api/session', {\n    method: 'DELETE'\n  });\n  dispatch(removeUser());\n  return response;\n};\nconst initialState = {\n  user: null\n};\n\nfunction reducer(state = initialState, action) {\n  let newState;\n\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state, {\n        user: action.payload\n      });\n      return newState;\n\n    case REMOVE_USER:\n      newState = Object.assign({}, state, {\n        user: null\n      });\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/adamfaidy/Documents/projects/Keeps2/google-keep/frontend/src/store/session.js"],"names":["SET_USER","REMOVE_USER","setUser","user","type","payload","removeUser","login","credential","password","dispatch","res","fetch","method","body","JSON","stringify","data","restoreUser","signup","username","email","response","logout","initialState","reducer","state","action","newState","Object","assign"],"mappings":"AACA,MAAMA,QAAQ,GAAG,iBAAjB;AACA,MAAMC,WAAW,GAAG,oBAApB;;AAEA,MAAMC,OAAO,GAAIC,IAAD,KAAW;AACzBC,EAAAA,IAAI,EAAEJ,QADmB;AAEzBK,EAAAA,OAAO,EAAEF;AAFgB,CAAX,CAAhB;;AAKA,MAAMG,UAAU,GAAG,OAAO;AACxBF,EAAAA,IAAI,EAAEH;AADkB,CAAP,CAAnB;;AAIA,OAAO,MAAMM,KAAK,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA8B,MAAOC,QAAP,IAAoB;AACrE,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,cAAD,EAAiB;AACtCC,IAAAA,MAAM,EAAE,MAD8B;AAEtCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAf;AAFgC,GAAjB,CAAvB;AAIAC,EAAAA,QAAQ,CAACR,OAAO,CAACS,GAAG,CAACM,IAAJ,CAASd,IAAV,CAAR,CAAR;AACA,SAAOQ,GAAP;AACD,CAPM;AASP,OAAO,MAAMO,WAAW,GAAG,MAAM,MAAOR,QAAP,IAAoB;AACnD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,cAAD,CAAvB;AACAF,EAAAA,QAAQ,CAACR,OAAO,CAACS,GAAG,CAACM,IAAJ,CAASd,IAAV,CAAR,CAAR;AACA,SAAOQ,GAAP;AACD,CAJM;AAMP,OAAO,MAAMQ,MAAM,GAAIhB,IAAD,IAAU,MAAOO,QAAP,IAAoB;AAClD,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBZ,IAAAA;AAAnB,MAAgCN,IAAtC;AACA,QAAMmB,QAAQ,GAAG,MAAMV,KAAK,CAAC,YAAD,EAAe;AACzCC,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBI,MAAAA,QADmB;AAEnBC,MAAAA,KAFmB;AAGnBZ,MAAAA;AAHmB,KAAf;AAFmC,GAAf,CAA5B;AASAC,EAAAA,QAAQ,CAACR,OAAO,CAACoB,QAAQ,CAACL,IAAT,CAAcd,IAAf,CAAR,CAAR;AACA,SAAOmB,QAAP;AACD,CAbM;AAeP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAOb,QAAP,IAAoB;AAC9C,QAAMY,QAAQ,GAAG,MAAMV,KAAK,CAAC,cAAD,EAAiB;AAC3CC,IAAAA,MAAM,EAAE;AADmC,GAAjB,CAA5B;AAGAH,EAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACA,SAAOgB,QAAP;AACD,CANM;AAQP,MAAME,YAAY,GAAG;AAAErB,EAAAA,IAAI,EAAE;AAAR,CAArB;;AAEA,SAASsB,OAAT,CAAiBC,KAAK,GAAGF,YAAzB,EAAuCG,MAAvC,EAA+C;AAC7C,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACvB,IAAf;AACE,SAAKJ,QAAL;AACE4B,MAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEvB,QAAAA,IAAI,EAAEwB,MAAM,CAACtB;AAAf,OAAzB,CAAX;AACA,aAAOuB,QAAP;;AACF,SAAK3B,WAAL;AACE2B,MAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEvB,QAAAA,IAAI,EAAE;AAAR,OAAzB,CAAX;AACA,aAAOyB,QAAP;;AACF;AACE,aAAOF,KAAP;AARJ;AAUD;;AAED,eAAeD,OAAf","sourcesContent":["\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\n\nconst setUser = (user) => ({\n  type: SET_USER,\n  payload: user\n});\n\nconst removeUser = () => ({\n  type: REMOVE_USER\n});\n\nexport const login = ({ credential, password }) => async (dispatch) => {\n  const res = await fetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({ credential, password })\n  });\n  dispatch(setUser(res.data.user));\n  return res;\n};\n\nexport const restoreUser = () => async (dispatch) => {\n  const res = await fetch('/api/session');\n  dispatch(setUser(res.data.user));\n  return res;\n};\n\nexport const signup = (user) => async (dispatch) => {\n  const { username, email, password } = user;\n  const response = await fetch('/api/users', {\n    method: 'POST',\n    body: JSON.stringify({\n      username,\n      email,\n      password\n    })\n  });\n\n  dispatch(setUser(response.data.user));\n  return response;\n};\n\nexport const logout = () => async (dispatch) => {\n  const response = await fetch('/api/session', {\n    method: 'DELETE'\n  });\n  dispatch(removeUser());\n  return response;\n};\n\nconst initialState = { user: null };\n\nfunction reducer(state = initialState, action) {\n  let newState;\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state, { user: action.payload });\n      return newState;\n    case REMOVE_USER:\n      newState = Object.assign({}, state, { user: null });\n      return newState;\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}